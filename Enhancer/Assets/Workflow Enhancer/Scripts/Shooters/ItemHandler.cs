//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Workflow Enhancer/Scripts/Shooters/ItemHandler.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @ItemHandler: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @ItemHandler()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""ItemHandler"",
    ""maps"": [
        {
            ""name"": ""Scroll"",
            ""id"": ""dc63484d-424d-4806-895b-c78637eef610"",
            ""actions"": [
                {
                    ""name"": ""Scroll"",
                    ""type"": ""Button"",
                    ""id"": ""cdfb231b-2ee5-4f6e-b432-4e614301fe1c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""Keyboard"",
                    ""id"": ""ffd2fb66-af38-4749-aaff-9480da660dfc"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Scroll"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""a5db79b2-bc35-4705-ab50-abcc8208046f"",
                    ""path"": ""<Mouse>/scroll/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Scroll"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""d96e8edc-6987-4bde-afe9-b7e71fc8ea78"",
                    ""path"": ""<Mouse>/scroll/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Scroll"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Controller"",
                    ""id"": ""0f5ba307-dc29-464a-892a-2dba866d83a2"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Scroll"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""ec6ff1f5-17f3-44b9-960f-230c079da478"",
                    ""path"": ""<Gamepad>/leftShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Scroll"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""cbd75c7f-3631-424c-82ca-f544dc0100cc"",
                    ""path"": ""<Gamepad>/rightShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Scroll"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""Usage"",
            ""id"": ""938d506c-f23a-4222-8cda-f43cae7cae75"",
            ""actions"": [
                {
                    ""name"": ""Shoot"",
                    ""type"": ""Button"",
                    ""id"": ""6b65f2e0-2202-4164-8fb6-949ad4eb0f59"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Aim"",
                    ""type"": ""Button"",
                    ""id"": ""bdc3699d-140f-4149-940e-31e97002c498"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""68a382b6-7319-482e-8571-0a4141e12924"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Shoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b1feb93f-eb25-4e3d-aa7c-962c85b30058"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Shoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""296e9625-cccd-40d8-981e-11465dd05252"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Aim"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b34a02b3-e7fa-471f-b0f5-4782326c4442"",
                    ""path"": ""<Gamepad>/leftTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Aim"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Scroll
        m_Scroll = asset.FindActionMap("Scroll", throwIfNotFound: true);
        m_Scroll_Scroll = m_Scroll.FindAction("Scroll", throwIfNotFound: true);
        // Usage
        m_Usage = asset.FindActionMap("Usage", throwIfNotFound: true);
        m_Usage_Shoot = m_Usage.FindAction("Shoot", throwIfNotFound: true);
        m_Usage_Aim = m_Usage.FindAction("Aim", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Scroll
    private readonly InputActionMap m_Scroll;
    private List<IScrollActions> m_ScrollActionsCallbackInterfaces = new List<IScrollActions>();
    private readonly InputAction m_Scroll_Scroll;
    public struct ScrollActions
    {
        private @ItemHandler m_Wrapper;
        public ScrollActions(@ItemHandler wrapper) { m_Wrapper = wrapper; }
        public InputAction @Scroll => m_Wrapper.m_Scroll_Scroll;
        public InputActionMap Get() { return m_Wrapper.m_Scroll; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ScrollActions set) { return set.Get(); }
        public void AddCallbacks(IScrollActions instance)
        {
            if (instance == null || m_Wrapper.m_ScrollActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_ScrollActionsCallbackInterfaces.Add(instance);
            @Scroll.started += instance.OnScroll;
            @Scroll.performed += instance.OnScroll;
            @Scroll.canceled += instance.OnScroll;
        }

        private void UnregisterCallbacks(IScrollActions instance)
        {
            @Scroll.started -= instance.OnScroll;
            @Scroll.performed -= instance.OnScroll;
            @Scroll.canceled -= instance.OnScroll;
        }

        public void RemoveCallbacks(IScrollActions instance)
        {
            if (m_Wrapper.m_ScrollActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IScrollActions instance)
        {
            foreach (var item in m_Wrapper.m_ScrollActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_ScrollActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public ScrollActions @Scroll => new ScrollActions(this);

    // Usage
    private readonly InputActionMap m_Usage;
    private List<IUsageActions> m_UsageActionsCallbackInterfaces = new List<IUsageActions>();
    private readonly InputAction m_Usage_Shoot;
    private readonly InputAction m_Usage_Aim;
    public struct UsageActions
    {
        private @ItemHandler m_Wrapper;
        public UsageActions(@ItemHandler wrapper) { m_Wrapper = wrapper; }
        public InputAction @Shoot => m_Wrapper.m_Usage_Shoot;
        public InputAction @Aim => m_Wrapper.m_Usage_Aim;
        public InputActionMap Get() { return m_Wrapper.m_Usage; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(UsageActions set) { return set.Get(); }
        public void AddCallbacks(IUsageActions instance)
        {
            if (instance == null || m_Wrapper.m_UsageActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_UsageActionsCallbackInterfaces.Add(instance);
            @Shoot.started += instance.OnShoot;
            @Shoot.performed += instance.OnShoot;
            @Shoot.canceled += instance.OnShoot;
            @Aim.started += instance.OnAim;
            @Aim.performed += instance.OnAim;
            @Aim.canceled += instance.OnAim;
        }

        private void UnregisterCallbacks(IUsageActions instance)
        {
            @Shoot.started -= instance.OnShoot;
            @Shoot.performed -= instance.OnShoot;
            @Shoot.canceled -= instance.OnShoot;
            @Aim.started -= instance.OnAim;
            @Aim.performed -= instance.OnAim;
            @Aim.canceled -= instance.OnAim;
        }

        public void RemoveCallbacks(IUsageActions instance)
        {
            if (m_Wrapper.m_UsageActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IUsageActions instance)
        {
            foreach (var item in m_Wrapper.m_UsageActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_UsageActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public UsageActions @Usage => new UsageActions(this);
    public interface IScrollActions
    {
        void OnScroll(InputAction.CallbackContext context);
    }
    public interface IUsageActions
    {
        void OnShoot(InputAction.CallbackContext context);
        void OnAim(InputAction.CallbackContext context);
    }
}
